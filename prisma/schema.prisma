generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  domain    String?  // Custom domain for white label
  
  // OAuth Apps per tenant (separate rate limits)
  linkedinAppId     String?
  linkedinAppSecret String?
  instagramAppId    String?
  instagramAppSecret String?
  
  // Plan and limits
  planType          String   @default("starter")
  monthlyPostLimit  Int      @default(30)
  dailyPostLimit    Int      @default(5)
  
  settings  Json?    // Branding, features, etc
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  accounts  Account[]
  posts     Post[]
}

model User {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  name         String?
  email        String
  passwordHash String
  roles        String[] @default([])
  createdAt    DateTime @default(now())
  accounts     Account[]
  posts        Post[]

  @@unique([email, tenantId])
}

model Account {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  provider     String   // "linkedin" | "instagram"
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  externalId   String?  // Provider's user ID
  username     String?  // Display name/handle
  profileData  Json?    // Additional profile info
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, provider, tenantId])
}

model Post {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  content      String?
  mediaUrls    String[] @default([])
  networks     String[]
  scheduledAt  DateTime
  status       String   @default("pending")
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  publishes    PostPublish[]
}

model PostPublish {
  id             String   @id @default(cuid())
  post           Post     @relation(fields: [postId], references: [id])
  postId         String
  provider       String
  status         String   @default("pending")
  publishedAt    DateTime?
  providerPostId String?
  errorMessage   String?
}

model EngagementSnapshot {
  id        String   @id @default(cuid())
  accountId String?
  postId    String?
  provider  String
  likes     Int      @default(0)
  comments  Int      @default(0)
  shares    Int      @default(0)
  reach     Int      @default(0)
  capturedAt DateTime @default(now())
}

model Report {
  id         String   @id @default(cuid())
  userId     String
  periodStart DateTime
  periodEnd   DateTime
  scope      String
  jsonBlob   Json?
  pdfUrl     String?
  createdAt  DateTime @default(now())
}

model WebhookEvent {
  id          String   @id @default(cuid())
  provider    String
  payload     Json
  receivedAt  DateTime @default(now())
  processedAt DateTime?
  status      String   @default("pending")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  status    String   @default("queued")
  sentAt    DateTime?
  payload   Json?
}
